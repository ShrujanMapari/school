# core.py — Module A (simple checks, no asserts)
import random

# ----- Dictionary with lists -----
DIFFICULTY_LEVELS = {
    "Easy":   {"ops": ["+", "-"],           "range": (1, 10)},
    "Medium": {"ops": ["+", "-", "*"],      "range": (2, 12)},
    "Hard":   {"ops": ["+", "-", "*", "/"], "range": (3, 15)},
}

# ----- Functions using if statements -----
def _compute(a: int, b: int, op: str) -> int:
    if op == "+": return a + b
    if op == "-": return a - b
    if op == "*": return a * b
    if op == "/": return a // b  # integer division by design
    # fallback if an unexpected operator appears
    return 0

def generate_question(level: str = "Easy"):
    cfg = DIFFICULTY_LEVELS.get(level, DIFFICULTY_LEVELS["Easy"])
    a = random.randint(*cfg["range"])
    b = random.randint(*cfg["range"])
    op = random.choice(cfg["ops"])

    # Make division clean: ensure a is a multiple of b
    if op == "/":
        b = random.randint(*cfg["range"])
        a = a * b  # guarantees integer result

    expr = f"{a} {op} {b}"
    ans = _compute(a, b, op)
    return expr, ans

# ----- Friendly “tests” that only print -----
def simple_checks(samples_per_level: int = 10):
    print("Running simple checks (no asserts)...")
    total = 0
    issues = 0

    for level in DIFFICULTY_LEVELS:             # loop over dictionary keys
        for _ in range(samples_per_level):       # loop for multiple samples
            total += 1
            expr, ans = generate_question(level)

            # Check types
            type_ok = isinstance(expr, str) and isinstance(ans, int)

            # Check division gives whole number (by design)
            div_ok = True
            if "/" in expr:
                # quick re-eval to see if integer math makes sense
                parts = expr.split()
                a, op, b = int(parts[0]), parts[1], int(parts[2])
                if op == "/" and b != 0:
                    # recompute using integer division and compare
                    div_ok = (ans == (a // b))

            # Report problems but don't stop the program
            if not type_ok or not div_ok:
                issues += 1
                print(f"[Check] Potential issue in level {level}: {expr} -> {ans} | type_ok={type_ok}, div_ok={div_ok}")

    passed = total - issues
    print(f"Checks complete: {passed}/{total} OK, {issues} potential issue(s).")
    return {"total": total, "passed": passed, "issues": issues}

if __name__ == "__main__":
    # Run the simple checks
    result = simple_checks(10)
    # Show a few sample questions
    for lvl in ("Easy", "Medium", "Hard"):
        q, a = generate_question(lvl)
        print(lvl, ":", q, "=", a)
